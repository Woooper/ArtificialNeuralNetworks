import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

hatalar = np.array([0]).reshape(1,1)

for dongu in range (20):   # 20 sonuç değerleri alınacak.



    # Gürültü, 1-bit'lik değişim ve 2-bitlik değişim için verilen kodlar fonksiyonlaştırılır.
    
    def gurultu(image):
        noisy = image + 0.2 * np.random.rand(5, 10)
        noisy = noisy/noisy.max()
        return noisy
    
    def degisim(image):
        rand_index = np.random.randint(0, 50)
        rand_image = np.array(image)
        rand_image[int(rand_index % 5),
         int(rand_index / 5)] = np.where(
         rand_image[int(rand_index % 5), int(rand_index / 5)] == 0.9,
         0.1, 0.9)
        return rand_image
    def degisim_2bit(image):
        rand_index = np.random.randint(0, 50)
        rand_image = np.array(image)
        rand_image[int(rand_index % 5),
         int(rand_index / 5)] = np.where(
         rand_image[int(rand_index % 5), int(rand_index / 5)] == 0.9,
         0.1, 0.9)
        rand_index = np.random.randint(0, 50)   
        rand_image[int(rand_index % 5),
         int(rand_index / 5)] = np.where(
         rand_image[int(rand_index % 5), int(rand_index / 5)] == 0.9,
         0.1, 0.9)
        return rand_image
    
    # Tetris Karakterleri Kullanılacak. Kare, çubuk, z ve t.
    
    kare = np.ones((5,10))-0.1
    cubuk = np.ones((5,10))-0.1
    t = np.ones((5,10))-0.1
    z = np.ones((5,10))-0.1
    kare[1:,2:-4] = 0.1
    cubuk[2:4,:] = 0.1
    t[0:2,0:6] = 0.1
    t[0:4,2:4]=0.1
    z[1:3,4:8]=0.1
    z[3:,6:]=0.1
    girisler = kare.reshape(50,1)
    girisler = np.concatenate((girisler,t.reshape(50,1)),axis=1)
    girisler = np.concatenate((girisler,z.reshape(50,1)),axis=1)
    girisler = np.concatenate((girisler,cubuk.reshape(50,1)),axis=1)
    
    # Daha sonra üstte tanımlanan fonksiyonlar ile bozuk veriler veri setine eklenir.
    
    for i in range (6):
        girisler = np.concatenate((girisler,gurultu(kare).reshape(50,1)),axis=1)
        girisler = np.concatenate((girisler,degisim(kare).reshape(50,1)),axis=1)
        girisler = np.concatenate((girisler,degisim_2bit(kare).reshape(50,1)),axis=1)
            
    for i in range(6):
        girisler = np.concatenate((girisler,gurultu(t).reshape(50,1)),axis=1)
        girisler = np.concatenate((girisler,degisim(t).reshape(50,1)),axis=1)
        girisler = np.concatenate((girisler,degisim_2bit(t).reshape(50,1)),axis=1)
    
    for i in range(6):
        girisler = np.concatenate((girisler,gurultu(cubuk).reshape(50,1)),axis=1)
        girisler = np.concatenate((girisler,degisim(cubuk).reshape(50,1)),axis=1)
        girisler = np.concatenate((girisler,degisim_2bit(cubuk).reshape(50,1)),axis=1)
        
    for i in range (6):
        girisler = np.concatenate((girisler,gurultu(z).reshape(50,1)),axis=1)
        girisler = np.concatenate((girisler,degisim(z).reshape(50,1)),axis=1)    
        girisler = np.concatenate((girisler,degisim_2bit(z).reshape(50,1)),axis=1)
    
    # Bu kısım örüntülerin tamamını görmek içindir. Çalıştırmak için yorumdan çıkartın.
    #for i in range (len(girisler.T)):
    #    plt.imshow(girisler[:,i].reshape(5,10), cmap='gray')
    #    plt.show()
    
    # Her veri grubu için sınıfları tanımlanır. 
    
    siniflar = np.array(([0.9,0.1,0.1,0.1],[0.1,0.9,0.1,0.1],[0.1,0.1,0.9,0.1],[0.1,0.1,0.1,0.9]))

    for i in range (6):
        siniflar = np.concatenate((siniflar,np.array([0.50,0.1,0.1,0.1]).reshape(1,4)))
        siniflar = np.concatenate((siniflar,np.array([0.40,0.1,0.1,0.1]).reshape(1,4)))
        siniflar = np.concatenate((siniflar,np.array([0.30,0.1,0.1,0.1]).reshape(1,4)))
    for i in range (6):
        siniflar = np.concatenate((siniflar,np.array([0.1,0.50,0.1,0.1]).reshape(1,4)))
        siniflar = np.concatenate((siniflar,np.array([0.1,0.40,0.1,0.1]).reshape(1,4)))
        siniflar = np.concatenate((siniflar,np.array([0.1,0.30,0.1,0.1]).reshape(1,4)))
    for i in range (6):
        siniflar = np.concatenate((siniflar,np.array([0.1,0.1,0.1,0.50]).reshape(1,4)))
        siniflar = np.concatenate((siniflar,np.array([0.1,0.1,0.1,0.40]).reshape(1,4)))
        siniflar = np.concatenate((siniflar,np.array([0.1,0.1,0.1,0.30]).reshape(1,4)))
    for i in range (6):
        siniflar = np.concatenate((siniflar,np.array([0.1,0.1,0.50,0.1]).reshape(1,4)))
        siniflar = np.concatenate((siniflar,np.array([0.1,0.1,0.40,0.1]).reshape(1,4)))
        siniflar = np.concatenate((siniflar,np.array([0.1,0.1,0.30,0.1]).reshape(1,4)))

                
        
    # Eğitim ve test kümesi ayrılması
    
    x_train,x_test,y_train,y_test = train_test_split(girisler.T[4:],siniflar[4:],test_size=0.25,random_state=dongu*2)
    
    # Örüntülerin düzgün halleri train ve test veri setlerine eklenir.
    
    x_train = np.concatenate((x_train,girisler.T[:4]))
    y_train = np.concatenate((y_train,siniflar[:4]))
    x_test = np.concatenate((x_test,girisler.T[:4]))
    y_test = np.concatenate((y_test,siniflar[:4]))
    
    # Model Kurma
    # Çıkış Değerlerimiz 0 ile 1 arasında olduğu için aktivasyon fonksiyonu lojistik olabilir.
    def akt(x):
        return (1/(1+np.exp(-x/4)))
    def akt_turev(x):
        return np.exp(x/4)/(((np.exp(x/4)+1)**2)*4)
    
    hiz = np.array([0.5,0.7,0.8,0.6])
    momentum = np.array([0.4,0.6,0.7,0.6])
    W1 = 0.2 * np.random.rand(6,51)
    W2 = 5 * np.random.rand(4,len(W1)+1)
    W3 = 3 * np.random.rand(8,len(W2)+1)
    W4 = 4*np.random.rand(4,len(W3)+1)
    x_train_b = np.hstack ((x_train, [[1]] * len (x_train)))
    hata_liste = np.array([])
    ton=0
    ht=1
    dongu=0
    cikis_list = np.zeros((len(x_train),4))
    while ht >= 0.035:
        ton=0
        dongu=dongu+1
        moment_1=W1
        moment_2=W2
        moment_3=W3
        moment_4=W4
        for ii in (x_train_b):    
            nod = np.matmul(W1,ii.reshape(51,1))
            nod_list = nod
            mid = akt(nod)        
            mid = np.concatenate((mid,np.array([1]).reshape(1,1)))
            nod2 = np.matmul(W2,mid)
            nod2_list = nod2
            mid2 = akt(nod2)
            mid2 = np.concatenate((mid2,np.array([1]).reshape(1,1)))
            nod3 = np.matmul(W3,mid2)
            nod3_list = nod3
            mid3 = akt(nod3)
            mid3 = np.concatenate((mid3,np.array([1]).reshape(1,1)))
            son = np.matmul(W4,mid3)
            cikis = akt(son)
            hata = y_train[ton].reshape(len(W4),1)-cikis
            grad_cikis = hata*akt_turev(son)
            grad_3 = np.matmul(W4.T[:-1],grad_cikis)*akt_turev(nod3_list)
            grad_2 = np.matmul(W3.T[:-1],grad_3)*akt_turev(nod2_list)
            grad_1 = np.matmul(W2.T[:-1],grad_2)*akt_turev(nod_list)
            a4=W4
            a3=W3
            a2=W2
            a1=W1
            W4 = W4+hiz[3]*np.matmul(grad_cikis,mid3.reshape(1,len(mid3)))+momentum[3]*(W4-moment_4)
            W3 = W3+(hiz[2]*np.matmul(grad_3,mid2.reshape(1,len(mid2))))+momentum[2]*(W3-moment_3)
            W2 = W2+hiz[1]*np.matmul(grad_2,mid.reshape(1,len(mid)))+momentum[1]*(W2-moment_2)
            W1 = W1+hiz[0]*np.matmul(grad_1,ii.reshape(1,len(ii)))+momentum[0]*(W1-moment_1)
            moment_4=a4
            moment_3=a3
            moment_2=a2
            moment_1=a1
            cikis_list[ton]=cikis.reshape(1,4)
            mid = np.zeros((3))
            mid2 = np.zeros((3))
            mid3 = np.zeros((3))
            ton+=1
        ht = np.array([np.sqrt(mean_squared_error(cikis_list,y_train))])
        hata_liste = np.concatenate((hata_liste, ht))
        
    #Eğitim sonucu sınıflar ayrılır.

    egitim_ciktilari=np.zeros((len(y_train),1))
    y_train_tekil=np.zeros((len(y_train),1))
    for i in range (len(y_train)):
        egitim_ciktilari[i] = cikis_list[i].max()
        y_train_tekil[i] = y_train[i].max()        

    #Eğitim çıktılarını çizdirmek için yorumdan satırından çıkarılmalıdır.
    #plt.figure()
    #plt.scatter(np.arange(len(y_train)),egitim_ciktilari,c='b')#,label='Eğitim Çıktıları')
    #plt.scatter(np.arange(len(y_train)),y_train_tekil,c='r')#,label='Gerçek Eğitim Değerleri')
    #plt.legend()
 
    plt.figure()
    plt.scatter(np.arange(len(hata_liste)),hata_liste[:])
    
    # Test Bölgesi
    cikis_liste = np.array([0,0,0,0]).reshape(1,4)
    x_test_b = np.hstack ((x_test, [[1]] * len (x_test)))
    for ii in (x_test_b):    
        nod = np.matmul(W1,ii.reshape(51,1))
        nod_list = nod
        mid = akt(nod)        
        mid = np.concatenate((mid,np.array([1]).reshape(1,1)))
        nod2 = np.matmul(W2,mid)
        nod2_list = nod2
        mid2 = akt(nod2)
        mid2 = np.concatenate((mid2,np.array([1]).reshape(1,1)))
        nod3 = np.matmul(W3,mid2)
        nod3_list = nod3
        mid3 = akt(nod3)
        mid3 = np.concatenate((mid3,np.array([1]).reshape(1,1)))
        son = np.matmul(W4,mid3)
        cikis = akt(son)
        cikis_liste = np.concatenate((cikis_liste,cikis.reshape(1,4)))
    
    # Test değerleri çıktısı sınıflar ayrılır ve çizdirilir.
    test_ciktilari=np.zeros((len(y_test),1))
    y_test_tekil=np.zeros((len(y_test),1))
    for i in range (len(y_test)):
        test_ciktilari[i] = cikis_liste[i+1].max()
        y_test_tekil[i] = y_test[i].max()
    plt.figure()
    plt.scatter(np.arange(len(y_test)),test_ciktilari,c='b')
    plt.scatter(np.arange(len(y_test)),y_test_tekil,c='r') 
    hatalar = np.concatenate((hatalar,np.sqrt(mean_squared_error(cikis_liste[1:],y_test)).reshape(1,1)))   
    print('Ortalama Test Hatası : ' , np.sqrt(mean_squared_error(cikis_liste[1:],y_test)))
print('\n', hatalar[1:],'\n')
print('\n', hatalar[1:].mean(),'\n')
print('\n',hatalar[1:].std())
