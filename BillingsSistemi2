# -*- coding: utf-8 -*-
"""
Created on Sun Jan 17 16:47:55 2021

@author: mteks
"""


from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
import numpy as np

hatalar = np.array([0]).reshape(1,1)

for dongu in range (20):   # 20 sonuç değerleri alınacak.
    
    from sklearn.model_selection import train_test_split
    from sklearn.metrics import mean_squared_error
    import matplotlib.pyplot as plt
    import numpy as np
    
    # y(k) fonksiyonunun ilk 3 değerini 0 alarak başlanır.
    ek=np.array([])
    y = np.array([0,0,0]).reshape(3,1)
    
    # Ödev dosyasındaki y(k) fonksiyonu yazılır.
    
    def billings (y,k):
        t = np.random.rand(1,1)*0.01
        return (0.8-5*np.exp(-((y[k-1])**2))*y[k-1]-(0.3+0.9*np.exp(-((y[k-1])**2)))*y[k-2]+0.1*np.sin(np.pi*y[k-1])+t),t
    
    # Toplam 50 adet çıkış değeri olması için döngü oluşturulur.
    for i in range (206):
        yt ,t = billings(y,i+3)
        y = np.concatenate((y,yt))
        ek=np.concatenate((ek,t.reshape(1)))
    
    
    # ilk 3 sıfır değeri atılır.
    y = y[3:]
    ek=ek[3:]
    
    # Giriş ve çıkışlar belirlenir.
    
    girisler = np.array([0]).reshape(1,1)
    cikislar = np.array([0]).reshape(1,1)
    for i in range (200):
            girisler = np.concatenate((girisler,ek[i+3].reshape(1,1)))     # Girisler için e(k) değeri kullanılır.
            cikislar = np.concatenate((cikislar,y[i+3].reshape(1,1)))
    girisler = girisler[1:]
    cikislar = cikislar[1:]
    # Giriş ve çıkışlar normalize edilir.
    
    a = cikislar.max()-cikislar.min()             
    girisler = (2*girisler/a)
    cikislar = (2*cikislar/a)
    
    # Eğitim ve test grupları ayrılır.
    
    x_train,x_test,y_train,y_test = girisler[:180],girisler[-20:],cikislar[:180],cikislar[-20:]#train_test_split(girisler,cikislar,test_size=0.1,random_state=42)
    
     # Çıkış Değerlerimiz yaklaşık -1 ile 1 arasında olduğu için aktivasyon fonksiyonu tanjant hiperbolik olabilir. Reel sayılarla çalıştığımız için x/4 kullanılmıştır.
    
    def akt(x):
        return (np.exp(x/8)-np.exp(-x/8))/(np.exp(-x/8)+np.exp(x/8))
    def akt_turev(x):
        return (np.exp(x/4))/(2*((np.exp(x/4)+1)**2))
    
    
    # Model Kurma
    # Çıkış Değerlerimiz 1 ile 1 arasında olduğu için aktivasyon fonksiyonu tanjant hiperbolik olabilir.
    hiz = 0.7
    wx = 3*np.random.rand(6,6)
    wu = 3*np.random.rand(len(wx),1)
    wy = np.random.rand(1,len(wx))
    hata_liste = np.array([])
    ht=1
    dongu=0
    cikis_list = np.zeros((len(x_train),1))
    xk = np.array([0,0,0,0,0,0]).reshape(6,1)
    
    while(ht>0.05):
        for i in range (len(x_train)):
            xk1=xk
            v = np.matmul(wu,x_train[i].reshape(1,1))+np.matmul(wx,xk) 
            xk = akt(v)  # Gizli katman işlemleri
            y = np.matmul(wy,xk).reshape(1)        # Çıkış bulunur
            cikis_list[i]=y
            hata=np.array([y_train[i]-y]).reshape(1,1) 
            wy1=wy                              # Wy(k-1) daha sonra kullanmak için kaydedilir.
            wy=wy+hiz*np.matmul(hata,xk.T)         # Güncelleme kısımları yazılır.
            wu=wu+hiz*(np.matmul((np.matmul(wy1.T,hata)*akt_turev(v)),x_train[i].reshape(1,1))) 
            wx=wx+hiz*(np.matmul((np.matmul(wy1.T,hata)*akt_turev(v)),xk1.T))
            #kk=np.concatenate((kk,wu.reshape(len(wu),len(wu.T),1)),axis=2)
        ht=np.sqrt(mean_squared_error(cikis_list,y_train))
        hata_liste=np.concatenate((hata_liste,np.array([ht]).reshape(1)))
        dongu+=1
        
    hata_liste = np.array([])
    cikis_list=np.zeros((len(x_test),1))
    for i in range (len(x_test)):
        v = np.matmul(wu,x_test[i].reshape(1,1))+np.matmul(wx,xk) 
        xk = akt(v)  # Gizli katman işlemleri
        y = np.matmul(wy,xk).reshape(1)        # Çıkış bulunur
        cikis_list[i]=y
        hata=np.array([y_test[i]-y]).reshape(1,1)
        hata_liste=np.concatenate((hata_liste,np.array([ht]).reshape(1)))
    plt.scatter(np.arange(len(y_test)),y_test,c='r',label='Gerçek Değerler')
    plt.scatter(np.arange(len(cikis_list)),cikis_list,c='b',label='Test Çıktıları')
    plt.legend();
