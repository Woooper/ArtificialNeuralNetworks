# -*- coding: utf-8 -*-
"""
Created on Sun Nov 22 04:30:39 2020

@author: mteks
"""
hata_sayilari = []
iterasyon_sayileri = []
for o in range (20):
    import numpy as np
    import matplotlib.pyplot as plt
    from sklearn.model_selection import train_test_split
    X1 =np.array([[0,-1],[0,0],[0,1],[1,-1],[1,0],[1,1],[-1,-1],[-1,0],[-1,1]])                    # Kümeler  ekleniyor.
    X2 =np.array([[-3,3],[-3,1],[-3,0],[-3,-1],[-3,-3],[-1,3],[-1,-3],[0,3],
    [0,-3],[1,3],[1,-3],[3,3],[3,1],[3,0],[3,-1],[3,-3],[-2,3],[-3,2],
    [-3,-2],[-2,-3],[2,3],[3,2],[3,-2],[2,-3]])
    X =  np.vstack((X1, np.atleast_2d(X2)))
    Y=np.array([1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1])   # Sınıflar belirtiliyor.
    fig = plt.figure()
    ax = fig.add_subplot(1, 1, 1)
    ax.scatter(X[9:,0],X[9:,1],c='r')    # Lineer ayrıştırılamaz durumdaki yapı.
    ax.scatter(X[:9,0],X[:9,1],c='b')
    def boyut_artirimi(x):                              # Boyut artırma fonksiyonu.
        X3D = np.linspace(1,10,len(x))
        X3D = np.array([3*x[:,0]**4+x[:,1]**4,3*x[:,0]**4+3*x[:,1]**4,4*x[:,0]**4+4*x[:,1]**4])
        return X3D.T
    def aktivasyon(x):         # Ayrık aktivasyon fonksiyonu.
        if x > 0:
            return(1)
        if x <= 0:
            return(-1)
    X1_3 = np.linspace(1,10,27)
    X2_3 = np.linspace(1,10,72)
    X1_3 = boyut_artirimi(X1)           #Boyut artırma fonksiyonu uygulanır.
    X2_3 = boyut_artirimi(X2)
    X_3 = np.vstack((X1_3, np.atleast_2d(X2_3)))
    w = [1,1,1,1]
    X_3_b = np.hstack ((X_3, [[1]] * len (X_3) ))  #Bayes terimi eklenir.
    x_train,x_test,y_train,y_test = train_test_split(X_3_b,Y,test_size = 15/33,random_state=o)   # Eğitim ve test kümeleri ayrılır.
    ax = fig.add_subplot(2, 1, 2)
    ax.scatter(X_3[9:,0],X_3[9:,1],c='r')        # Boyut artırımından sonraki verilerin görünümü.
    ax.scatter(X_3[:9,0],X_3[:9,1],c='b')
    # Eğitim Bölgesi
    
    hata_sayisi = 1                                 
    iterasyon_sayisi = 0
    c=1
    while hata_sayisi != 0 :       # Eğitimde hatamız sıfırlanana kadar devam eder.
        hata_sayisi = 0
        for i in range (len(x_train)):
            y = w*x_train[i]
            z = sum(y)
            t = aktivasyon(z)
            tt = y_train[i]
            if t != tt:
                hata_sayisi += 1
            w=w+(0.5*c*(tt-t)*x_train[i])
        iterasyon_sayisi = iterasyon_sayisi + 1
    print('Son Ağırlıklar : ',w,'\n','İterasyon Sayısı: ',iterasyon_sayisi)
    iterasyon_sayileri.append(iterasyon_sayisi)
     #Test bölgesi
    for i in range (len(x_test)):
        y = w*x_test[i]
        z = sum(y)
        t = aktivasyon(z)
        tt = y_test[i]
        if t != tt:
            hata_sayisi += 1
    print('Test Hata Sayısı : ',hata_sayisi)
    hata_sayilari.append(hata_sayisi)
print('Hata sayıları :',hata_sayilari,'\n',
      'İterasyon Sayıları : ',iterasyon_sayileri,'\n',
      'Ortalama olarak çıkan hata sayısı : ',
      (sum(hata_sayilari)/20),'\n','Ortalama İterasyon Sayısı : ',
      (sum(iterasyon_sayileri))/20,
      '\n',
      'Hata sayıları Standart Sapması : ',np.std(hata_sayilari),'\n',
      'İterasyon sayıları standart sapması : ',np.std(iterasyon_sayileri))
